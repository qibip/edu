// //  Методы массивов

// const array = [20, 22, 45, 421, 413, 434];

// // // reduce() – Сведение массива к одному значению !!!!!!!!!!!!!!!!
// // // Метод reduce() используется для суммирования, нахождения среднего значения, объединения и других вычислений.
// const sum = array.reduce((acc, num) => {
//   acc[num] = (acc[num] || 0) + 1;
//   return acc;
// }, {});
// console.log(sum);

// // map() – Преобразование массива
// // Метод map() создает новый массив, применяя функцию к каждому элементу исходного массива.
// const map = array.map((n) => n + 2);
// console.log(map);

// // filter() – Фильтрация элементов
// // Метод filter() создает новый массив, включающий только те элементы, которые соответствуют условию.
// const filter = array.filter((n) => n > 40);
// console.log(filter);

// // forEach() – Перебор элементов
// // Метод forEach() перебирает элементы массива, но не создает новый массив.
// array.forEach((fruct) => console.log(fruct));

// // find() – Поиск элемента
// // Метод find() возвращает первый элемент, удовлетворяющий условию.
// const find = array.find((n) => n < 23);
// console.log(find);

// // some() / every() – Проверка условий
// //     some() – проверяет, есть ли хотя бы один элемент, удовлетворяющий условию.
// //     every() – проверяет, все ли элементы соответствуют условию.
// console.log(array.some((n) => n + 2 === 22));
// console.log(array.every((n) => n + 2 === 33));

// // reverse () - развернуть в обратном направлении
// console.log(array.reverse());

// // Поиск в array 45 и добавление его при помощи push в миссив items через spread ... тем самым распоковываем массив и добавляем значения в другой по отдельности
// const items = [21, 2];
// items.push(...array.filter((n) => n === 45));
// console.log(items);

// // sort() – Сортировка массива
// // Метод sort() изменяет исходный массив, сортируя его.
// console.log(array.sort((a, b) => a - b)); // по возрастанию
// console.log(array.sort((a, b) => b - a)); // по убыванию

// // ЗАДАЧИ
// // Используя map(), увеличь все числа массива [2, 4, 6, 8] в 2 раза.
// const mo = array.map((n) => n * 2);
// console.log(mo);

// // Используя filter(), получи массив только с положительными числами из [-3, 5, -1, 10].
// const wo = [-3, 5, -1, 10];
// console.log(wo.filter((n) => n > 0));

// // Используя reduce(), найди сумму чисел [1, 10, 100, 1000].
// const tee = [1, 10, 100, 1000];
// console.log(tee.reduce((acc, n) => acc + n, 0));

// // Используя find(), найди пользователя { id: 3 } в массиве:
// const member = [
//   {
//     name: 'alex',
//     id: 3,
//     age: 12,
//   },
//   {
//     name: 'peter',
//     id: 6,
//     age: 15,
//   },
// ];

// const va = member.find((n) => n.id == 3);
// if (va) {
//   console.log(va.name);
// }

// // Используя sort(), отсортируй массив [15, 2, 8, 23, 7] по возрастанию.
// const srt = [15, 2, 8, 23, 7];
// console.log(srt.sort((a, b) => a - b));

// // Перевернуть и объединить строки: Напиши функцию, которая принимает массив строк и возвращает одну строку, в которой строки массива идут
// // в обратном порядке, а между ними стоит пробел.
// reverseAndJoin(['Hello', 'world', 'this', 'is', 'JS']); // 'JS is this world Hello'
// const world = ['Hello', 'world', 'this', 'is', 'JS'];
// console.log(...world.reverse());

// //Сортировка массива объектов по ключу: Напиши функцию, которая принимает массив объектов, сортирует его по ключу (например, по age)
// // и возвращает отсортированный массив.
// const sortByAge = [
//   { name: 'John', age: 30 },
//   { name: 'Jane', age: 25 },
//   { name: 'Bob', age: 35 },
// ];

// const sortir = (n) =>
//   n.sort((a, b) => {
//     return a.age - b.age;
//   });
// console.log(sortir(sortByAge));

// // Простое слияние массивов с условием: Напиши функцию, которая принимает два массива чисел и возвращает новый массив,
// // состоящий из всех чисел, которые есть в первом массиве, но нет во втором. Результат должен быть отсортирован по возрастанию.
// // [1, 2, 3, 4, 5] [4, 5, 6, 7]

// const arrayOne = [1, 2, 3, 4, 5];
// const arrayTwo = [4, 5, 6, 7];

// const summArray = (arr1, arr2) => {
//   return arr1.filter((e) => !arr2.includes(e)).sort((a, b) => b - a); // отсортиварал по убыванию для примера
// };
// console.log(summArray(arrayOne, arrayTwo));
